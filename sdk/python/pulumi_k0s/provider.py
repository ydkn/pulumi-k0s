# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 no_drain: Optional[pulumi.Input[str]] = None,
                 skip_downgrade_check: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] no_drain: Do not drain nodes before upgrades/updates.
        :param pulumi.Input[str] skip_downgrade_check: Do not check if a downgrade would be performed.
        """
        if no_drain is None:
            no_drain = (_utilities.get_env('PULUMI_K0S_NO_DRAIN') or 'false')
        if no_drain is not None:
            pulumi.set(__self__, "no_drain", no_drain)
        if skip_downgrade_check is None:
            skip_downgrade_check = (_utilities.get_env('PULUMI_K0S_SKIP_DOWNGRADE_CHECK') or 'false')
        if skip_downgrade_check is not None:
            pulumi.set(__self__, "skip_downgrade_check", skip_downgrade_check)

    @property
    @pulumi.getter(name="noDrain")
    def no_drain(self) -> Optional[pulumi.Input[str]]:
        """
        Do not drain nodes before upgrades/updates.
        """
        return pulumi.get(self, "no_drain")

    @no_drain.setter
    def no_drain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_drain", value)

    @property
    @pulumi.getter(name="skipDowngradeCheck")
    def skip_downgrade_check(self) -> Optional[pulumi.Input[str]]:
        """
        Do not check if a downgrade would be performed.
        """
        return pulumi.get(self, "skip_downgrade_check")

    @skip_downgrade_check.setter
    def skip_downgrade_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_downgrade_check", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 no_drain: Optional[pulumi.Input[str]] = None,
                 skip_downgrade_check: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a K0s resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] no_drain: Do not drain nodes before upgrades/updates.
        :param pulumi.Input[str] skip_downgrade_check: Do not check if a downgrade would be performed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a K0s resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 no_drain: Optional[pulumi.Input[str]] = None,
                 skip_downgrade_check: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if no_drain is None:
                no_drain = (_utilities.get_env('PULUMI_K0S_NO_DRAIN') or 'false')
            __props__.__dict__["no_drain"] = no_drain
            if skip_downgrade_check is None:
                skip_downgrade_check = (_utilities.get_env('PULUMI_K0S_SKIP_DOWNGRADE_CHECK') or 'false')
            __props__.__dict__["skip_downgrade_check"] = skip_downgrade_check
        super(Provider, __self__).__init__(
            'k0s',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="noDrain")
    def no_drain(self) -> pulumi.Output[Optional[str]]:
        """
        Do not drain nodes before upgrades/updates.
        """
        return pulumi.get(self, "no_drain")

    @property
    @pulumi.getter(name="skipDowngradeCheck")
    def skip_downgrade_check(self) -> pulumi.Output[Optional[str]]:
        """
        Do not check if a downgrade would be performed.
        """
        return pulumi.get(self, "skip_downgrade_check")

