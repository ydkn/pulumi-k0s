// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k0s

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ydkn/pulumi-k0s/sdk/go/k0s/internal"
)

type Provider struct {
	pulumi.ProviderResourceState
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Concurrency == nil {
		if d := internal.GetEnvOrDefault(30, internal.ParseEnvInt, "PULUMI_K0S_CONCURRENCY"); d != nil {
			args.Concurrency = pulumi.IntPtr(d.(int))
		}
	}
	if args.ConcurrentUploads == nil {
		if d := internal.GetEnvOrDefault(5, internal.ParseEnvInt, "PULUMI_K0S_CONCURRENT_UPLOADS"); d != nil {
			args.ConcurrentUploads = pulumi.IntPtr(d.(int))
		}
	}
	if args.NoDrain == nil {
		if d := internal.GetEnvOrDefault(false, internal.ParseEnvBool, "PULUMI_K0S_NO_DRAIN"); d != nil {
			args.NoDrain = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.NoWait == nil {
		if d := internal.GetEnvOrDefault(false, internal.ParseEnvBool, "PULUMI_K0S_NO_WAIT"); d != nil {
			args.NoWait = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.SkipDowngradeCheck == nil {
		if d := internal.GetEnvOrDefault(false, internal.ParseEnvBool, "PULUMI_K0S_SKIP_DOWNGRADE_CHECK"); d != nil {
			args.SkipDowngradeCheck = pulumi.BoolPtr(d.(bool))
		}
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:k0s", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Maximum number of hosts to configure in parallel, set to 0 for unlimited
	Concurrency *int `pulumi:"concurrency"`
	// Maximum number of files to upload in parallel, set to 0 for unlimited
	ConcurrentUploads *int `pulumi:"concurrentUploads"`
	// Do not drain worker nodes when upgrading
	NoDrain *bool `pulumi:"noDrain"`
	// Do not wait for worker nodes to join
	NoWait *bool `pulumi:"noWait"`
	// Skip downgrade check
	SkipDowngradeCheck *bool `pulumi:"skipDowngradeCheck"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Maximum number of hosts to configure in parallel, set to 0 for unlimited
	Concurrency pulumi.IntPtrInput
	// Maximum number of files to upload in parallel, set to 0 for unlimited
	ConcurrentUploads pulumi.IntPtrInput
	// Do not drain worker nodes when upgrading
	NoDrain pulumi.BoolPtrInput
	// Do not wait for worker nodes to join
	NoWait pulumi.BoolPtrInput
	// Skip downgrade check
	SkipDowngradeCheck pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
